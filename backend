from flask import Flask, request, jsonify, session
from flask_sqlalchemy import SQLAlchemy
from werkzeug.security import generate_password_hash, check_password_hash
from flask_cors import CORS

app = Flask(__name__)
CORS(app)
app.config['SECRET_KEY'] = 'your_secret_key'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///users.db'
db = SQLAlchemy(app)

# User model
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    password = db.Column(db.String(200), nullable=False)

# GPA Record model
class GPARecord(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    subject = db.Column(db.String(100), nullable=False)
    marks = db.Column(db.Float, nullable=False)
    gpa = db.Column(db.Float, nullable=False)

# User Registration
@app.route('/register', methods=['POST'])
def register():
    data = request.get_json()
    hashed_password = generate_password_hash(data['password'], method='sha256')
    new_user = User(username=data['username'], password=hashed_password)
    db.session.add(new_user)
    db.session.commit()
    return jsonify({'message': 'User registered successfully'})

# User Login
@app.route('/login', methods=['POST'])
def login():
    data = request.get_json()
    user = User.query.filter_by(username=data['username']).first()
    if user and check_password_hash(user.password, data['password']):
        session['user_id'] = user.id
        return jsonify({'message': 'Login successful'})
    return jsonify({'message': 'Invalid credentials'}), 401

# Add GPA Record
@app.route('/add_record', methods=['POST'])
def add_record():
    if 'user_id' not in session:
        return jsonify({'message': 'Unauthorized'}), 401
    data = request.get_json()
    new_record = GPARecord(user_id=session['user_id'], subject=data['subject'], marks=data['marks'], gpa=data['gpa'])
    db.session.add(new_record)
    db.session.commit()
    return jsonify({'message': 'Record added successfully'})

# Get GPA Records
@app.route('/records', methods=['GET'])
def get_records():
    if 'user_id' not in session:
        return jsonify({'message': 'Unauthorized'}), 401
    records = GPARecord.query.filter_by(user_id=session['user_id']).all()
    return jsonify([{'subject': r.subject, 'marks': r.marks, 'gpa': r.gpa} for r in records])

if __name__ == '__main__':
    with app.app_context():
        db.create_all()
    app.run(debug=True)
